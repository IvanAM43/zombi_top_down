<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_torso</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables globales
walkingSpeed = 3;
global.dBullet = 1;
click = 1;

global.player_legs = instance_create(x,y, obj_player_legs);


global.player_view = instance_create(x,y, obj_view);
view_object[0] = global.player_view;
view_hborder[0] = view_wview[0] / 2;
view_vborder[0] = view_hview[0] / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player movement
hspeed = walkingSpeed * (keyboard_check(ord('D')) - keyboard_check(ord('A')));//si le keyboardcheck est vrai, donne 1, alors 1-0 x=1
vspeed = walkingSpeed * (keyboard_check(ord('S')) - keyboard_check(ord('W')));

if hspeed != 0 || vspeed != 0
    {
    if(global.player_legs.sprite_index != spr_player_legs_running) 
        global.player_legs.image_index = 0;
    global.player_legs.sprite_index = spr_player_legs_running;
    global.player_legs.image_speed = (abs(speed) / walkingSpeed);
    };
else
    {
    global.player_legs.sprite_index = spr_player_legs_standing;
    };

//points the legs in the direction of travel    
global.player_legs.image_angle = point_direction(x,y,x+hspeed,y+vspeed);
global.player_legs.x = x;
global.player_legs.y = y;


//points the torso at the mouse
image_angle = point_direction(x, y, mouse_x, mouse_y);




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fire bullet
// Get the instance direction, plus usefull variables

global.dBullet = point_direction(x, y, mouse_x, mouse_y);
lengx = lengthdir_x(36, global.dBullet);
lengy = lengthdir_y(36, global.dBullet);

// fire bullets

click -= 1;
if (mouse_check_button(mb_left) &amp;&amp; click &lt;= 0)
{
 var inst;
 inst = instance_create(x+lengx, y+lengy, obj_bullet);
 click = 20
}

// spam enable

if mouse_check_button_released(mb_left) click = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player view
view_direction = point_direction(x, y, mouse_x, mouse_y);
view_distance = point_distance(x, y, mouse_x, mouse_y)/2;
distance_limit = 300;

if view_distance &gt;= distance_limit
    {view_distance = distance_limit;}

global.player_view.x = x + lengthdir_x(view_distance,view_direction);
global.player_view.y = y + lengthdir_y(view_distance,view_direction);

    
/*
global.player_view.x = (x + mouse_x) / 2;
global.player_view.y = (y + mouse_y) / 2;
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions
if hspeed!=0
if !place_free(x+hspeed,y+vspeed)
{
    if hspeed&gt;0 move_contact_solid(0,hspeed)
    if hspeed&lt;0 move_contact_solid(180,-hspeed)
    hspeed=0
}
if vspeed!=0
if !place_free(x+hspeed,y+vspeed)
{
    if vspeed&gt;0 move_contact_solid(270,vspeed)
    if vspeed&lt;0 move_contact_solid(90,-vspeed)
    vspeed=0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Hud

draw_self();
draw_set_colour(c_black);
draw_set_halign(fa_center);
draw_text(x, y+20, "Direction " + string(global.dBullet) 
    + "#lengx " + string(lengx) 
    + "#lengy " + string(lengy) 
    + "#view_direction" + string(view_direction)
    + "#view_distance" + string(view_distance)
    + "#speed" + string((abs(speed) / walkingSpeed)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
